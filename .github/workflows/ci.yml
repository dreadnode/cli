name: CI

on:
  push:
    branches: [ main, dev, feature/eng-186-cli-make-available-to-beta-users ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, dev ]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    name: Validate
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: abatilo/actions-poetry@e78f54a89cb052fff327414dd9ff010b5d2b4dbd

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local

      - name: Cache dependencies
        uses: actions/cache@6849a6489940f00c2f30c0fb92c6274307ccb58a
        with:
          path: ./.venv
          key: venv-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-py${{ matrix.python-version }}-

      - name: Install package
        run: |
          poetry install --all-extras

      - name: Validate version
        run: |
          POETRY_VERSION=$(poetry version -s)
          INIT_VERSION=$(python -c "import dreadnode_cli; print(dreadnode_cli.__version__)")
          if [ "$POETRY_VERSION" != "$INIT_VERSION" ]; then
            echo "Version mismatch: pyproject.toml ($POETRY_VERSION) != __init__.py ($INIT_VERSION)"
            exit 1
          fi

      - name: Lint
        run: poetry run ruff check --output-format=github dreadnode_cli

      - name: Type check
        run: poetry run mypy --no-error-summary dreadnode_cli

      - name: Test
        run: poetry run pytest --junitxml=pytest.xml dreadnode_cli

      - name: Upload test results
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: pytest.xml

  publish-package:
    name: Publish Package
    needs: validate
    environment: protected
    permissions:
      contents: read
      id-token: write
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Setup Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: abatilo/actions-poetry@e78f54a89cb052fff327414dd9ff010b5d2b4dbd

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local

      - name: Install package
        run: poetry install --no-dev

      - name: Validate version
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          if ! [[ $TAG_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid tag format: $TAG_VERSION. Must be vX.X.X"
            exit 1
          fi
          POETRY_VERSION=$(poetry version -s)
          if [ "$TAG_VERSION" != "$POETRY_VERSION" ]; then
            echo "Tag ($TAG_VERSION) doesn't match pyproject.toml ($POETRY_VERSION)"
            exit 1
          fi

      - name: Build and publish
        run: |
          poetry build
          poetry publish

  publish-docker:
    name: Publish Docker
    needs: validate
    environment: protected
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Setup QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349

      - name: Login to Docker Hub
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set Docker tags
        id: tags
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "tags=dreadnode/cli:latest,dreadnode/cli:$VERSION" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max